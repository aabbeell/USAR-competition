package world;

import java.awt.Frame;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;

import rescueframework.RescueFramework;
import rescueframework.Settings;

/**
 * Main frame of the simulator
 */
public class MapEditor extends javax.swing.JFrame{
    /** The map being edited */
    Map map;
   
    /**
     * Creates new form EditorFrame
     */
    public MapEditor() {
        // Init auto generated components
        initComponents();
             
        // Load frame position, size and state from the saved settings
        setBounds(Settings.getInt("left",0),Settings.getInt("top",0),Settings.getInt("width",1200),Settings.getInt("height",800));
        if (Settings.getInt("maximized",0) == 1) {
            setExtendedState(getExtendedState() | Frame.MAXIMIZED_BOTH);
        }
        
        // Load all files from the "maps" subfolder
        jComboBox1.removeAllItems();
        File folder = new File("maps");
        File[] listOfFiles = folder.listFiles();

        // Add files as options to the JComboBox
        String lastMap = Settings.getString("map", "");
        int selectedIndex = -1;
        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile()) {
                String fileName = listOfFiles[i].getName();
                jComboBox1.addItem(fileName);
                if (fileName.equals(lastMap)) selectedIndex = i;
            } 
        }
        
        
                
        
        // Load all possible obstacles from the images folder
        jComboBox2.removeAllItems();
        jComboBox2.addItem("Edit walls");
        jComboBox2.addItem("Add/remove injured");
        jComboBox2.addItem("Toggle exit cell");
        jComboBox2.addItem("Toggle start cell");
        folder = new File("images");
        listOfFiles = folder.listFiles();

        // Add files as options to the JComboBox
        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile()) {
                String fileName = listOfFiles[i].getName();
                if (fileName.startsWith("patient") || fileName.startsWith("robot")) {
                    continue;
                }
                if (fileName.endsWith(".png")) fileName = fileName.substring(0,fileName.length()-4);
                
                jComboBox2.addItem(fileName);
            } 
        }
        
        // Key listener for keyboard robot control
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MyDispatcher());
        
        // Window listener to detect window close event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                // Determine if the window is maximized
                if ((getExtendedState() & Frame.MAXIMIZED_BOTH) == 0) {
                    Settings.setInt("maximized", 0);
                } else {
                    Settings.setInt("maximized", 1);
                }
                
                // Save window position and size after unmaximizing it
                setExtendedState(0);                
                Settings.setInt("top", getY());
                Settings.setInt("left", getX());
                Settings.setInt("width", getWidth());
                Settings.setInt("height", getHeight());
            }
        });
    }
    
    /**
     * Update the GUI to the latest state of the world
     */
    public void refresh() {
        // Repaint cells and world objects
        paintPanel.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        paintPanel = new world.PaintPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RescueFramework");
        setMinimumSize(new java.awt.Dimension(1200, 800));
        setSize(new java.awt.Dimension(1200, 800));

        jPanel1.setPreferredSize(new java.awt.Dimension(924, 33));

        jButton1.setText("Load map");
        jButton1.setFocusCycleRoot(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Save map");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setFocusable(false);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.setFocusable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(711, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        paintPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paintPanelMouseClicked(evt);
            }
        });
        getContentPane().add(paintPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        map.saveToFile();
    }//GEN-LAST:event_jButton3ActionPerformed
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String mapName = jComboBox1.getSelectedItem()+"";
        Settings.setString("map", mapName);
        
        // Load the map from file
        map = new Map(mapName, 0,0,0,0,true);
        paintPanel.setMaps(map, map, false);
        
        refresh();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Mouse clicked on a cell
     * 
     * @param evt   The click event
     */
    private void paintPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseClicked
        // Make the paintPanel handle the click event
        Cell cell = paintPanel.mouseClicked(evt.getX(), evt.getY());
        if (cell == null) return;
        String mode = (String)jComboBox2.getSelectedItem();

        // set visibility to true to allow edits
        cell.setRobotVisibility(true);

        if (mode.equals("Edit walls")) {
            int[] distances = new int[4];
            int cellSize = paintPanel.getCellSize();
            distances[0] = evt.getY()-cell.getY()*cellSize;
            distances[1] = (cell.getX()+1)*cellSize-evt.getX();
            distances[2] = (cell.getY()+1)*cellSize-evt.getY();
            distances[3] = evt.getX()-cell.getX()*cellSize;
            
            int closestIndex = 0;
            for (int i=0; i<4; i++) {
                if (distances[i]<distances[closestIndex]) {
                    closestIndex = i;
                }
            }
            
            RescueFramework.log("Wall edit direction: "+closestIndex);
            cell.toggleWall(closestIndex);
        } else if (mode.equals("Add/remove injured")) {
            if (cell.hasInjuredEx()) {
                map.removeInjured(cell.getInjured());
            } else {
                if (cell.hasObstacleEx()) {
                    cell.setObstacleImage("");
                }
            
                Injured inj = new Injured((int)(Math.random()*1000d));
                map.addInjured(inj, cell);
            }
        } else if (mode.equals("Toggle exit cell")) {
            cell.setExit(!cell.isExit());
        } else if (mode.equals("Toggle start cell")) {
            cell.setStart(!cell.isStart());
        
        } else {
            // Add obstacle
            if (cell.hasInjuredEx()) {
                map.removeInjured(cell.getInjured());
                cell.setObstacleImage(mode);
            } else if (cell.hasObstacleEx()) {
                cell.setObstacleImage("");
            } else {
                cell.setObstacleImage(mode);
            }
            
            
        }
        refresh();
    }//GEN-LAST:event_paintPanelMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JPanel jPanel1;
    private world.PaintPanel paintPanel;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Custom KeyEventDispatcher to cach keyboard event globally in the application
     */
    private class MyDispatcher implements KeyEventDispatcher {
        /**
         * Custom dispatchKeyEvent function to process key events
         * @param e     The KeyEvent to process
         * @return      Always returns false
         */
        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if (e.getID() == KeyEvent.KEY_PRESSED) {
                // Only process up-down-left-right keys
                if (e.getKeyCode()>=37 && e.getKeyCode()<=40) {
                    int dir = (e.getKeyCode()-34) % 4;
                        // TODO: handle keypress
                }
            } 
            return false;
        }
    }
    
    
    public static void main(String[] args) {
        MapEditor frame = new MapEditor();
        frame.setVisible(true);
    }

}
